// Code generated by protoc-gen-go. DO NOT EDIT.
// source: product.proto

package ecommerce

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation errs at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ProductMsg struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Description          string   `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	Price                float32  `protobuf:"fixed32,4,opt,name=price,proto3" json:"price,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProductMsg) Reset()         { *m = ProductMsg{} }
func (m *ProductMsg) String() string { return proto.CompactTextString(m) }
func (*ProductMsg) ProtoMessage()    {}
func (*ProductMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0fd8b59378f44a5, []int{0}
}

func (m *ProductMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProductMsg.Unmarshal(m, b)
}
func (m *ProductMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProductMsg.Marshal(b, m, deterministic)
}
func (m *ProductMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProductMsg.Merge(m, src)
}
func (m *ProductMsg) XXX_Size() int {
	return xxx_messageInfo_ProductMsg.Size(m)
}
func (m *ProductMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ProductMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ProductMsg proto.InternalMessageInfo

func (m *ProductMsg) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ProductMsg) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProductMsg) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ProductMsg) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

type Information struct {
	OrderID              int64    `protobuf:"varint,1,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	ProductID            int64    `protobuf:"varint,2,opt,name=ProductID,proto3" json:"ProductID,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Information) Reset()         { *m = Information{} }
func (m *Information) String() string { return proto.CompactTextString(m) }
func (*Information) ProtoMessage()    {}
func (*Information) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0fd8b59378f44a5, []int{1}
}

func (m *Information) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Information.Unmarshal(m, b)
}
func (m *Information) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Information.Marshal(b, m, deterministic)
}
func (m *Information) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Information.Merge(m, src)
}
func (m *Information) XXX_Size() int {
	return xxx_messageInfo_Information.Size(m)
}
func (m *Information) XXX_DiscardUnknown() {
	xxx_messageInfo_Information.DiscardUnknown(m)
}

var xxx_messageInfo_Information proto.InternalMessageInfo

func (m *Information) GetOrderID() int64 {
	if m != nil {
		return m.OrderID
	}
	return 0
}

func (m *Information) GetProductID() int64 {
	if m != nil {
		return m.ProductID
	}
	return 0
}

type OrderID struct {
	Value                int64    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *OrderID) Reset()         { *m = OrderID{} }
func (m *OrderID) String() string { return proto.CompactTextString(m) }
func (*OrderID) ProtoMessage()    {}
func (*OrderID) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0fd8b59378f44a5, []int{2}
}

func (m *OrderID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_OrderID.Unmarshal(m, b)
}
func (m *OrderID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_OrderID.Marshal(b, m, deterministic)
}
func (m *OrderID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OrderID.Merge(m, src)
}
func (m *OrderID) XXX_Size() int {
	return xxx_messageInfo_OrderID.Size(m)
}
func (m *OrderID) XXX_DiscardUnknown() {
	xxx_messageInfo_OrderID.DiscardUnknown(m)
}

var xxx_messageInfo_OrderID proto.InternalMessageInfo

func (m *OrderID) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Order struct {
	Id                   int64         `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Items                []*ProductMsg `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	Price                float32       `protobuf:"fixed32,3,opt,name=price,proto3" json:"price,omitempty"`
	Description          string        `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	Destination          string        `protobuf:"bytes,5,opt,name=destination,proto3" json:"destination,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Order) Reset()         { *m = Order{} }
func (m *Order) String() string { return proto.CompactTextString(m) }
func (*Order) ProtoMessage()    {}
func (*Order) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0fd8b59378f44a5, []int{3}
}

func (m *Order) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Order.Unmarshal(m, b)
}
func (m *Order) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Order.Marshal(b, m, deterministic)
}
func (m *Order) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Order.Merge(m, src)
}
func (m *Order) XXX_Size() int {
	return xxx_messageInfo_Order.Size(m)
}
func (m *Order) XXX_DiscardUnknown() {
	xxx_messageInfo_Order.DiscardUnknown(m)
}

var xxx_messageInfo_Order proto.InternalMessageInfo

func (m *Order) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Order) GetItems() []*ProductMsg {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *Order) GetPrice() float32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *Order) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Order) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

type Respond struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	Statue               int64    `protobuf:"varint,2,opt,name=statue,proto3" json:"statue,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Respond) Reset()         { *m = Respond{} }
func (m *Respond) String() string { return proto.CompactTextString(m) }
func (*Respond) ProtoMessage()    {}
func (*Respond) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0fd8b59378f44a5, []int{4}
}

func (m *Respond) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Respond.Unmarshal(m, b)
}
func (m *Respond) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Respond.Marshal(b, m, deterministic)
}
func (m *Respond) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Respond.Merge(m, src)
}
func (m *Respond) XXX_Size() int {
	return xxx_messageInfo_Respond.Size(m)
}
func (m *Respond) XXX_DiscardUnknown() {
	xxx_messageInfo_Respond.DiscardUnknown(m)
}

var xxx_messageInfo_Respond proto.InternalMessageInfo

func (m *Respond) GetOk() bool {
	if m != nil {
		return m.Ok
	}
	return false
}

func (m *Respond) GetStatue() int64 {
	if m != nil {
		return m.Statue
	}
	return 0
}

type Destination struct {
	Des                  string   `protobuf:"bytes,1,opt,name=des,proto3" json:"des,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Destination) Reset()         { *m = Destination{} }
func (m *Destination) String() string { return proto.CompactTextString(m) }
func (*Destination) ProtoMessage()    {}
func (*Destination) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0fd8b59378f44a5, []int{5}
}

func (m *Destination) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Destination.Unmarshal(m, b)
}
func (m *Destination) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Destination.Marshal(b, m, deterministic)
}
func (m *Destination) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Destination.Merge(m, src)
}
func (m *Destination) XXX_Size() int {
	return xxx_messageInfo_Destination.Size(m)
}
func (m *Destination) XXX_DiscardUnknown() {
	xxx_messageInfo_Destination.DiscardUnknown(m)
}

var xxx_messageInfo_Destination proto.InternalMessageInfo

func (m *Destination) GetDes() string {
	if m != nil {
		return m.Des
	}
	return ""
}

type Parcel struct {
	Des                  string   `protobuf:"bytes,1,opt,name=des,proto3" json:"des,omitempty"`
	Count                int64    `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Orders               []*Order `protobuf:"bytes,3,rep,name=orders,proto3" json:"orders,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Parcel) Reset()         { *m = Parcel{} }
func (m *Parcel) String() string { return proto.CompactTextString(m) }
func (*Parcel) ProtoMessage()    {}
func (*Parcel) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0fd8b59378f44a5, []int{6}
}

func (m *Parcel) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Parcel.Unmarshal(m, b)
}
func (m *Parcel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Parcel.Marshal(b, m, deterministic)
}
func (m *Parcel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Parcel.Merge(m, src)
}
func (m *Parcel) XXX_Size() int {
	return xxx_messageInfo_Parcel.Size(m)
}
func (m *Parcel) XXX_DiscardUnknown() {
	xxx_messageInfo_Parcel.DiscardUnknown(m)
}

var xxx_messageInfo_Parcel proto.InternalMessageInfo

func (m *Parcel) GetDes() string {
	if m != nil {
		return m.Des
	}
	return ""
}

func (m *Parcel) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *Parcel) GetOrders() []*Order {
	if m != nil {
		return m.Orders
	}
	return nil
}

type SureMsg struct {
	Orderid              int64    `protobuf:"varint,1,opt,name=orderid,proto3" json:"orderid,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Destination          string   `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SureMsg) Reset()         { *m = SureMsg{} }
func (m *SureMsg) String() string { return proto.CompactTextString(m) }
func (*SureMsg) ProtoMessage()    {}
func (*SureMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0fd8b59378f44a5, []int{7}
}

func (m *SureMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SureMsg.Unmarshal(m, b)
}
func (m *SureMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SureMsg.Marshal(b, m, deterministic)
}
func (m *SureMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SureMsg.Merge(m, src)
}
func (m *SureMsg) XXX_Size() int {
	return xxx_messageInfo_SureMsg.Size(m)
}
func (m *SureMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_SureMsg.DiscardUnknown(m)
}

var xxx_messageInfo_SureMsg proto.InternalMessageInfo

func (m *SureMsg) GetOrderid() int64 {
	if m != nil {
		return m.Orderid
	}
	return 0
}

func (m *SureMsg) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *SureMsg) GetDestination() string {
	if m != nil {
		return m.Destination
	}
	return ""
}

func init() {
	proto.RegisterType((*ProductMsg)(nil), "ecommerce.ProductMsg")
	proto.RegisterType((*Information)(nil), "ecommerce.Information")
	proto.RegisterType((*OrderID)(nil), "ecommerce.OrderID")
	proto.RegisterType((*Order)(nil), "ecommerce.Order")
	proto.RegisterType((*Respond)(nil), "ecommerce.Respond")
	proto.RegisterType((*Destination)(nil), "ecommerce.Destination")
	proto.RegisterType((*Parcel)(nil), "ecommerce.Parcel")
	proto.RegisterType((*SureMsg)(nil), "ecommerce.SureMsg")
}

func init() { proto.RegisterFile("product.proto", fileDescriptor_f0fd8b59378f44a5) }

var fileDescriptor_f0fd8b59378f44a5 = []byte{
	// 493 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xcd, 0x8a, 0xdb, 0x30,
	0x10, 0xc7, 0xb1, 0x9d, 0x38, 0xc9, 0x98, 0x2d, 0x5b, 0xd1, 0x2e, 0x26, 0x14, 0xd6, 0xf8, 0x64,
	0x28, 0x84, 0x34, 0x65, 0xa1, 0x90, 0x6b, 0x7a, 0xc8, 0x61, 0xe9, 0xe2, 0xbd, 0xf5, 0xa6, 0x5a,
	0x53, 0xc7, 0x6c, 0x6c, 0x19, 0x49, 0x6e, 0xdf, 0xa1, 0x0f, 0xd1, 0x67, 0x2d, 0x96, 0xe5, 0x44,
	0x8d, 0x13, 0xc2, 0xde, 0x3c, 0xa3, 0xf9, 0xfa, 0xff, 0x66, 0x30, 0xdc, 0xd4, 0x82, 0xb3, 0x26,
	0x53, 0x8b, 0x5a, 0x70, 0xc5, 0xc9, 0x0c, 0x33, 0x5e, 0x96, 0x28, 0x32, 0x8c, 0x77, 0x00, 0x4f,
	0xdd, 0xdb, 0xa3, 0xcc, 0xc9, 0x1b, 0x70, 0x0b, 0x16, 0x3a, 0x91, 0x93, 0x78, 0xa9, 0x5b, 0x30,
	0x42, 0x60, 0x54, 0xd1, 0x12, 0x43, 0x37, 0x72, 0x92, 0x59, 0xaa, 0xbf, 0x49, 0x04, 0x01, 0x43,
	0x99, 0x89, 0xa2, 0x56, 0x05, 0xaf, 0x42, 0x4f, 0x3f, 0xd9, 0x2e, 0xf2, 0x0e, 0xc6, 0xb5, 0x28,
	0x32, 0x0c, 0x47, 0x91, 0x93, 0xb8, 0x69, 0x67, 0xc4, 0x5f, 0x21, 0xd8, 0x56, 0x3f, 0xb9, 0x28,
	0xa9, 0x0e, 0x0a, 0x61, 0xf2, 0x4d, 0x30, 0x14, 0xdb, 0x8d, 0xe9, 0xd7, 0x9b, 0xe4, 0x03, 0xcc,
	0xcc, 0x48, 0xdb, 0x8d, 0xee, 0xec, 0xa5, 0x47, 0x47, 0x7c, 0x7f, 0xc8, 0x6b, 0xfb, 0xfc, 0xa2,
	0xfb, 0x06, 0x4d, 0x81, 0xce, 0x88, 0xff, 0x3a, 0x30, 0xd6, 0x11, 0x03, 0x35, 0x1f, 0x61, 0x5c,
	0x28, 0x2c, 0x65, 0xe8, 0x46, 0x5e, 0x12, 0xac, 0xde, 0x2f, 0x0e, 0x18, 0x16, 0x47, 0x06, 0x69,
	0x17, 0x73, 0x14, 0xe1, 0x59, 0x22, 0x4e, 0xc5, 0x8f, 0x86, 0xe2, 0xbb, 0x08, 0x55, 0x54, 0x5a,
	0x66, 0x38, 0x3e, 0x44, 0xf4, 0xae, 0xf8, 0x13, 0x4c, 0x52, 0x94, 0x35, 0xaf, 0x58, 0x3b, 0x21,
	0x7f, 0xd1, 0x13, 0x4e, 0x53, 0x97, 0xbf, 0x90, 0x3b, 0xf0, 0xa5, 0xa2, 0xaa, 0x41, 0xa3, 0xdb,
	0x58, 0xf1, 0x3d, 0x04, 0x9b, 0x63, 0x05, 0x72, 0x0b, 0x1e, 0x43, 0xa9, 0xf3, 0x66, 0x69, 0xfb,
	0x19, 0x7f, 0x07, 0xff, 0x89, 0x8a, 0x0c, 0xf7, 0xc3, 0xb7, 0x56, 0x49, 0xc6, 0x9b, 0x4a, 0x99,
	0x9a, 0x9d, 0x41, 0x12, 0xf0, 0x79, 0x4b, 0x49, 0x86, 0x9e, 0xa6, 0x71, 0x6b, 0xd1, 0xd0, 0xf8,
	0x52, 0xf3, 0x1e, 0xe7, 0x30, 0x79, 0x6e, 0x04, 0xb6, 0xf7, 0x11, 0xc2, 0x44, 0x3b, 0x0f, 0x58,
	0x7b, 0xf3, 0x14, 0x8c, 0x7b, 0x15, 0x8c, 0x37, 0x00, 0xb3, 0xfa, 0x33, 0x02, 0xff, 0x91, 0x56,
	0x34, 0x47, 0xb2, 0x06, 0xa0, 0x8c, 0x99, 0xad, 0x90, 0xf3, 0x9b, 0x9a, 0xdf, 0x59, 0x6e, 0xfb,
	0xb4, 0xd6, 0x00, 0x39, 0xaa, 0x3e, 0xf9, 0x42, 0xd4, 0xfc, 0x7c, 0x51, 0xb2, 0x86, 0x1b, 0x86,
	0x7b, 0x54, 0x78, 0x2d, 0x9f, 0x58, 0xfe, 0x7e, 0x9f, 0x4b, 0x98, 0xe6, 0xa8, 0xba, 0xeb, 0x23,
	0xa7, 0x40, 0xb7, 0x9b, 0xf9, 0x00, 0x32, 0xf9, 0x02, 0x81, 0x44, 0x2a, 0xb2, 0x5d, 0x67, 0x5e,
	0x50, 0x3a, 0xc8, 0x5b, 0x3a, 0xe4, 0xa1, 0xe5, 0xd9, 0x0e, 0x7a, 0xb9, 0xdd, 0xb9, 0x11, 0x57,
	0x30, 0x95, 0x8d, 0xc0, 0x67, 0xac, 0xd8, 0x7f, 0x39, 0x66, 0xc5, 0x67, 0x73, 0x1e, 0x60, 0x4a,
	0x19, 0x7b, 0xdd, 0x84, 0x89, 0xd3, 0xee, 0x41, 0xee, 0xf8, 0x6f, 0x73, 0x98, 0x36, 0x47, 0xeb,
	0x98, 0xe7, 0x6f, 0xed, 0x82, 0x3a, 0x34, 0x71, 0x96, 0xce, 0x0f, 0x5f, 0xff, 0xaa, 0x3e, 0xff,
	0x0b, 0x00, 0x00, 0xff, 0xff, 0x53, 0xd4, 0x2f, 0x8b, 0xbb, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ManageClient is the client API for Manage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ManageClient interface {
	AddProduct(ctx context.Context, in *ProductMsg, opts ...grpc.CallOption) (*Information, error)
	GetProduct(ctx context.Context, in *Information, opts ...grpc.CallOption) (*ProductMsg, error)
	DeleteProduct(ctx context.Context, in *Information, opts ...grpc.CallOption) (*Respond, error)
	GetOrder(ctx context.Context, in *OrderID, opts ...grpc.CallOption) (*Order, error)
	SearchOrder(ctx context.Context, in *ProductMsg, opts ...grpc.CallOption) (Manage_SearchOrderClient, error)
	DeleteOrder(ctx context.Context, in *OrderID, opts ...grpc.CallOption) (*Respond, error)
	SureSend(ctx context.Context, in *SureMsg, opts ...grpc.CallOption) (*Respond, error)
	AddOrder(ctx context.Context, opts ...grpc.CallOption) (Manage_AddOrderClient, error)
	ShowParcel(ctx context.Context, opts ...grpc.CallOption) (Manage_ShowParcelClient, error)
}

type manageClient struct {
	cc grpc.ClientConnInterface
}

func NewManageClient(cc grpc.ClientConnInterface) ManageClient {
	return &manageClient{cc}
}

func (c *manageClient) AddProduct(ctx context.Context, in *ProductMsg, opts ...grpc.CallOption) (*Information, error) {
	out := new(Information)
	err := c.cc.Invoke(ctx, "/ecommerce.Manage/addProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GetProduct(ctx context.Context, in *Information, opts ...grpc.CallOption) (*ProductMsg, error) {
	out := new(ProductMsg)
	err := c.cc.Invoke(ctx, "/ecommerce.Manage/getProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) DeleteProduct(ctx context.Context, in *Information, opts ...grpc.CallOption) (*Respond, error) {
	out := new(Respond)
	err := c.cc.Invoke(ctx, "/ecommerce.Manage/deleteProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) GetOrder(ctx context.Context, in *OrderID, opts ...grpc.CallOption) (*Order, error) {
	out := new(Order)
	err := c.cc.Invoke(ctx, "/ecommerce.Manage/getOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) SearchOrder(ctx context.Context, in *ProductMsg, opts ...grpc.CallOption) (Manage_SearchOrderClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Manage_serviceDesc.Streams[0], "/ecommerce.Manage/searchOrder", opts...)
	if err != nil {
		return nil, err
	}
	x := &manageSearchOrderClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Manage_SearchOrderClient interface {
	Recv() (*Order, error)
	grpc.ClientStream
}

type manageSearchOrderClient struct {
	grpc.ClientStream
}

func (x *manageSearchOrderClient) Recv() (*Order, error) {
	m := new(Order)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *manageClient) DeleteOrder(ctx context.Context, in *OrderID, opts ...grpc.CallOption) (*Respond, error) {
	out := new(Respond)
	err := c.cc.Invoke(ctx, "/ecommerce.Manage/deleteOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) SureSend(ctx context.Context, in *SureMsg, opts ...grpc.CallOption) (*Respond, error) {
	out := new(Respond)
	err := c.cc.Invoke(ctx, "/ecommerce.Manage/sureSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageClient) AddOrder(ctx context.Context, opts ...grpc.CallOption) (Manage_AddOrderClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Manage_serviceDesc.Streams[1], "/ecommerce.Manage/addOrder", opts...)
	if err != nil {
		return nil, err
	}
	x := &manageAddOrderClient{stream}
	return x, nil
}

type Manage_AddOrderClient interface {
	Send(*ProductMsg) error
	CloseAndRecv() (*Order, error)
	grpc.ClientStream
}

type manageAddOrderClient struct {
	grpc.ClientStream
}

func (x *manageAddOrderClient) Send(m *ProductMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *manageAddOrderClient) CloseAndRecv() (*Order, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Order)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *manageClient) ShowParcel(ctx context.Context, opts ...grpc.CallOption) (Manage_ShowParcelClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Manage_serviceDesc.Streams[2], "/ecommerce.Manage/showParcel", opts...)
	if err != nil {
		return nil, err
	}
	x := &manageShowParcelClient{stream}
	return x, nil
}

type Manage_ShowParcelClient interface {
	Send(*Destination) error
	Recv() (*Parcel, error)
	grpc.ClientStream
}

type manageShowParcelClient struct {
	grpc.ClientStream
}

func (x *manageShowParcelClient) Send(m *Destination) error {
	return x.ClientStream.SendMsg(m)
}

func (x *manageShowParcelClient) Recv() (*Parcel, error) {
	m := new(Parcel)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ManageServer is the server API for Manage service.
type ManageServer interface {
	AddProduct(context.Context, *ProductMsg) (*Information, error)
	GetProduct(context.Context, *Information) (*ProductMsg, error)
	DeleteProduct(context.Context, *Information) (*Respond, error)
	GetOrder(context.Context, *OrderID) (*Order, error)
	SearchOrder(*ProductMsg, Manage_SearchOrderServer) error
	DeleteOrder(context.Context, *OrderID) (*Respond, error)
	SureSend(context.Context, *SureMsg) (*Respond, error)
	AddOrder(Manage_AddOrderServer) error
	ShowParcel(Manage_ShowParcelServer) error
}

// UnimplementedManageServer can be embedded to have forward compatible implementations.
type UnimplementedManageServer struct {
}

func (*UnimplementedManageServer) AddProduct(ctx context.Context, req *ProductMsg) (*Information, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProduct not implemented")
}
func (*UnimplementedManageServer) GetProduct(ctx context.Context, req *Information) (*ProductMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (*UnimplementedManageServer) DeleteProduct(ctx context.Context, req *Information) (*Respond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteProduct not implemented")
}
func (*UnimplementedManageServer) GetOrder(ctx context.Context, req *OrderID) (*Order, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOrder not implemented")
}
func (*UnimplementedManageServer) SearchOrder(req *ProductMsg, srv Manage_SearchOrderServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchOrder not implemented")
}
func (*UnimplementedManageServer) DeleteOrder(ctx context.Context, req *OrderID) (*Respond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteOrder not implemented")
}
func (*UnimplementedManageServer) SureSend(ctx context.Context, req *SureMsg) (*Respond, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SureSend not implemented")
}
func (*UnimplementedManageServer) AddOrder(srv Manage_AddOrderServer) error {
	return status.Errorf(codes.Unimplemented, "method AddOrder not implemented")
}
func (*UnimplementedManageServer) ShowParcel(srv Manage_ShowParcelServer) error {
	return status.Errorf(codes.Unimplemented, "method ShowParcel not implemented")
}

func RegisterManageServer(s *grpc.Server, srv ManageServer) {
	s.RegisterService(&_Manage_serviceDesc, srv)
}

func _Manage_AddProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProductMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).AddProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecommerce.Manage/AddProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).AddProduct(ctx, req.(*ProductMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Information)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecommerce.Manage/GetProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GetProduct(ctx, req.(*Information))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_DeleteProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Information)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DeleteProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecommerce.Manage/DeleteProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DeleteProduct(ctx, req.(*Information))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_GetOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).GetOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecommerce.Manage/GetOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).GetOrder(ctx, req.(*OrderID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_SearchOrder_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProductMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ManageServer).SearchOrder(m, &manageSearchOrderServer{stream})
}

type Manage_SearchOrderServer interface {
	Send(*Order) error
	grpc.ServerStream
}

type manageSearchOrderServer struct {
	grpc.ServerStream
}

func (x *manageSearchOrderServer) Send(m *Order) error {
	return x.ServerStream.SendMsg(m)
}

func _Manage_DeleteOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).DeleteOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecommerce.Manage/DeleteOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).DeleteOrder(ctx, req.(*OrderID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_SureSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SureMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServer).SureSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecommerce.Manage/SureSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServer).SureSend(ctx, req.(*SureMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Manage_AddOrder_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ManageServer).AddOrder(&manageAddOrderServer{stream})
}

type Manage_AddOrderServer interface {
	SendAndClose(*Order) error
	Recv() (*ProductMsg, error)
	grpc.ServerStream
}

type manageAddOrderServer struct {
	grpc.ServerStream
}

func (x *manageAddOrderServer) SendAndClose(m *Order) error {
	return x.ServerStream.SendMsg(m)
}

func (x *manageAddOrderServer) Recv() (*ProductMsg, error) {
	m := new(ProductMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Manage_ShowParcel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ManageServer).ShowParcel(&manageShowParcelServer{stream})
}

type Manage_ShowParcelServer interface {
	Send(*Parcel) error
	Recv() (*Destination, error)
	grpc.ServerStream
}

type manageShowParcelServer struct {
	grpc.ServerStream
}

func (x *manageShowParcelServer) Send(m *Parcel) error {
	return x.ServerStream.SendMsg(m)
}

func (x *manageShowParcelServer) Recv() (*Destination, error) {
	m := new(Destination)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Manage_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ecommerce.Manage",
	HandlerType: (*ManageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addProduct",
			Handler:    _Manage_AddProduct_Handler,
		},
		{
			MethodName: "getProduct",
			Handler:    _Manage_GetProduct_Handler,
		},
		{
			MethodName: "deleteProduct",
			Handler:    _Manage_DeleteProduct_Handler,
		},
		{
			MethodName: "getOrder",
			Handler:    _Manage_GetOrder_Handler,
		},
		{
			MethodName: "deleteOrder",
			Handler:    _Manage_DeleteOrder_Handler,
		},
		{
			MethodName: "sureSend",
			Handler:    _Manage_SureSend_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "searchOrder",
			Handler:       _Manage_SearchOrder_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "addOrder",
			Handler:       _Manage_AddOrder_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "showParcel",
			Handler:       _Manage_ShowParcel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "product.proto",
}
